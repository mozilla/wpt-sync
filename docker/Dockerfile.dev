FROM python:2.7-stretch

RUN groupadd --gid 10001 app && \
    useradd --uid 10001 --gid 10001 --home /app --create-home app

ENV RABBITMQ_CONFIG_FILE=/etc/rabbitmq/rabbitmq
COPY ./docker/rabbitmq.conf /etc/rabbitmq/rabbitmq.conf

COPY ./docker/start_wptsync.sh /app/start_wptsync.sh
RUN chmod +x /app/start_wptsync.sh

COPY ./docker/get_ini.py /app/get_ini.py
RUN chmod +x /app/get_ini.py

# install/update git and erlang/rabbitmq dependencies
RUN set -eux; \
    apt-get update; \
    apt-get install -y git sudo less emacs-nox wget gnupg apt-transport-https

### Install latest erlang
# add buster sources.list
RUN set -eux; \
# add buster sources.list
    sed 's/stretch/buster/g' /etc/apt/sources.list \
        | tee /etc/apt/sources.list.d/buster.list; \
        # update apt-preferences such that we get only erlang* from only buster 
    { \
        echo 'Package: *'; \
        echo 'Pin: release n=buster*'; \
        echo 'Pin-Priority: -10'; \
        echo; \
        echo 'Package: erlang*'; \
        echo 'Pin: release n=buster*'; \
        echo 'Pin-Priority: 999'; \
        echo; \
        echo 'Package: erlang*'; \
        echo 'Pin: release n=stretch*'; \
        echo 'Pin-Priority: -10'; \
    } | tee /etc/apt/preferences.d/buster-erlang

# install Erlang
RUN set -eux; \
    # start with "erlang-base-hipe" because it and "erlang-base" (non-hipe) are exclusive
    apt-get update; \
    if apt-cache show erlang-base-hipe 2>/dev/null | grep -q 'Package: erlang-base-hipe'; then \
        apt-get install -y --no-install-recommends \
        erlang-base-hipe \
        ; \
    fi; \
    apt-get install -y --no-install-recommends \
        erlang-asn1 \
        erlang-crypto \
        erlang-eldap \
        erlang-inets \
        erlang-mnesia \
        erlang-nox \
        erlang-os-mon \
        erlang-public-key \
        erlang-ssl \
        erlang-xmerl \
        ; \
    rm -rf /var/lib/apt/lists/*
### Done erlang

### Install rabbitmq
RUN set -eux; \
    echo "deb https://dl.bintray.com/rabbitmq/debian stretch main"| \
        sudo tee /etc/apt/sources.list.d/bintray.rabbitmq.list; \
    wget -O- https://dl.bintray.com/rabbitmq/Keys/rabbitmq-release-signing-key.asc | \
        sudo apt-key add - \
        ; \
    apt-get update; \
    apt-get install -y --no-install-recommends \
        socat \
        rabbitmq-server \
        ; \
    rm -rf /var/lib/apt/lists/*
### Done rabbitmq

RUN apt-get purge -y --auto-remove wget gnupg apt-transport-https

RUN adduser app sudo; \
    echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers; \
    # allow rabbmitmq to write to /app/workspace/logs
    usermod -a -G app rabbitmq

COPY . /app/wpt-sync
RUN chown -R app:app /app/wpt-sync

USER app

# Set up files and config
RUN mkdir /app/workspace \
    /app/workspace/logs \
    /app/data \
    /app/testdata \
    /app/repos \
    /app/git-cinnabar \
    /app/fzf \
    /app/.ssh

# Install git-cinnabar
WORKDIR /app/git-cinnabar
ENV PATH=/app/git-cinnabar:$PATH

RUN git clone https://github.com/glandium/git-cinnabar.git . \
    && git checkout c5a4aa78d11426350ec880a54b944cc802116642; \
    pip install --user requests \
    && git cinnabar download

# Install fzf for mach try fuzzy
WORKDIR /app/fzf

RUN git clone --depth 1 https://github.com/junegunn/fzf.git . \
    && ./install --bin

ENV PATH=/app/fzf/bin:$PATH

WORKDIR /app/wpt-sync

RUN set -eux; \
    git config --global user.name moz-wptsync-bot; \
    git config --global user.email wptsync@mozilla.com; \
    cp /app/wpt-sync/docker/known_hosts /app/.ssh/known_hosts; \
    # Copy test credentials as a temporary placeholder in workspace, and to testdata
    cp /app/wpt-sync/test/testdata/credentials.ini /app/workspace/credentials.ini; \
    cp /app/wpt-sync/test/testdata/sync.ini /app/workspace/sync.ini; \
    cp /app/wpt-sync/test/testdata/credentials.ini /app/testdata/credentials.ini; \
    cp /app/wpt-sync/test/testdata/sync.ini /app/testdata/sync.ini; \
    # Configure ipython
    mkdir -p /app/.ipython/profile_default/startup/ \
    && cp 00-startup.py /app/.ipython/profile_default/startup/; \
    # Install the wptsync app in development mode
    virtualenv /app/venv \
    && /app/venv/bin/pip install -r requirements/prod.txt --no-deps --require-hashes \
    && /app/venv/bin/pip install -r requirements/dev.txt --no-deps \
    && /app/venv/bin/pip install -r requirements/mozautomation.txt --no-deps

WORKDIR /app

# This puts the egg-info dir in /app, which won't be overwritten
# when docker mounts the volume for our source code
RUN /app/venv/bin/python /app/wpt-sync/setup.py develop --no-deps

ENV PYTHONPATH=/app/wpt-sync
ENV WPTSYNC_ROOT=/app/workspace
ENV WPTSYNC_REPO_ROOT=/app/repos
# Allow git-cinnabar to find latest hg
ENV PATH=/app/venv/bin:$PATH

# Mach requires that this is set
ENV SHELL=/bin/bash

WORKDIR /app/wpt-sync

# /app/wpt-sync: bind mount to src dir (only on dev) or dir with wheels?
# /app/workspace: bind mount to [empty] dir where service will write working data, logs
# config files, credentials, ssh config
# /app/data: bind mount to dir where service will find credentials, ssh config
# /app/repos: bind mount to ebs volume for gecko and wpt repos (or local dev repos)
VOLUME ["/app/wpt-sync", "/app/workspace", "/app/repos", "/app/data"]

ENTRYPOINT ["/app/start_wptsync.sh"]
CMD ["--worker"]
