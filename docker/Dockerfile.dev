FROM ubuntu:18.04

RUN groupadd --gid 10001 app && \
        useradd --uid 10001 --gid 10001 --home /app --create-home app && \
        groupadd --gid 10002 rabbitmq && \
        useradd --uid 10002 --gid 10002 rabbitmq --home /home/rabbitmq --create-home

COPY ./docker/start_wptsync.sh /app/start_wptsync.sh
COPY ./docker/get_ini.py /app/get_ini.py
RUN chmod +x /app/get_ini.py /app/start_wptsync.sh

# Disable ipv6 in gpg to avoid signing failures
RUN mkdir ~/.gnupg && echo "disable-ipv6" >> ~/.gnupg/dirmngr.conf

# install/update pip, git and erlang/rabbitmq dependencies
RUN set -eux; \
    apt-get update; \
    apt-get upgrade -y; \
    apt-get install -y \
        apt-transport-https \
        curl \
        emacs-nox \
        git \
        gnupg \
        less \
        locales \
        python \
        python-virtualenv \
        python-pip \
        sudo \
        wget \
        ;\
    pip install --upgrade pip

RUN set -eux; \
    count=0; \
    until sudo apt-key adv --keyserver "hkps.pool.sks-keyservers.net" --recv-keys "0x6B73A36E6026DFCA"; \
    do \
        count=$((count+1)); sleep 5; \
        if [ $count -gt 2 ]; then \
            echo "Failed to perform apt-key, FAILING"; \
	    exit 1; \
        fi; \
	echo "apt-key adv Failed, trying again ($count/3)"; \
    done; \
    wget -O - "https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc" | \
        sudo apt-key add - \
        ; \
    sudo echo "deb https://dl.bintray.com/rabbitmq-erlang/debian bionic erlang-21.x" >> \
        /etc/apt/sources.list.d/bintray.rabbitmq.list; \
    sudo echo "deb https://dl.bintray.com/rabbitmq/debian bionic main" >> \
        /etc/apt/sources.list.d/bintray.rabbitmq.list; \
    sudo apt-get update -y; \
    sudo apt-get install -y \
        libssl-dev \
        erlang-asn1 \
        erlang-crypto \
        erlang-eldap \
        erlang-inets \
        erlang-mnesia \
        erlang-nox \
        erlang-os-mon \
        erlang-public-key \
        erlang-ssl \
        erlang-xmerl \
        erlang-base-hipe \
        erlang-crypto \
        rabbitmq-server;

# install tini for process management so we can use its -g option
ENV TINI_VERSION v0.17.0
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini
RUN chmod +x /tini

RUN apt-get purge -y --auto-remove gnupg apt-transport-https

RUN locale-gen en_US.UTF-8
ENV LC_ALL en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US.UTF-8

RUN adduser app sudo; \
    echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers;

COPY . /app/wpt-sync
RUN chown -R app:app /app/wpt-sync

COPY ./config/rabbitmq.conf /etc/rabbitmq/rabbitmq.conf
RUN echo LOG_BASE=/app/workspace/logs/rabbitmq >> /etc/rabbitmq/rabbitmq-env.conf

USER app

# Set up files and config
RUN mkdir /app/workspace \
    /app/workspace/logs \
    /app/workspace/logs/rabbitmq \
    /app/testdata \
    /app/repos \
    /app/git-cinnabar \
    /app/fzf \
    /app/.ssh

RUN sudo chown -R rabbitmq:rabbitmq /app/workspace/logs/rabbitmq

ENV RABBITMQ_CONFIG_FILE=/etc/rabbitmq/rabbitmq

COPY ./config/ssh_config /app/.ssh/config
RUN sudo chown -R app:app /app/.ssh/

# Install git-cinnabar
WORKDIR /app/git-cinnabar
ENV PATH=/app/git-cinnabar:$PATH

RUN git clone https://github.com/glandium/git-cinnabar.git . \
    && git checkout origin/release; \
    pip install --user requests \
    && git cinnabar download

# Install fzf for mach try fuzzy
WORKDIR /app/fzf

RUN git clone --depth 1 https://github.com/junegunn/fzf.git . \
    && ./install --bin

ENV PATH=/app/fzf/bin:$PATH

WORKDIR /app/wpt-sync

RUN set -eux; \
    git config --global user.name moz-wptsync-bot; \
    git config --global user.email wptsync@mozilla.com; \
    cp /app/wpt-sync/config/known_hosts /app/.ssh/known_hosts; \
    # Configure ipython
    mkdir -p /app/.ipython/profile_default/startup/ \
    && cp 00-startup.py /app/.ipython/profile_default/startup/; \
    # Install the wptsync app in development mode
    virtualenv /app/venv \
    && /app/venv/bin/pip install -r requirements/prod.txt --no-deps --require-hashes \
    && /app/venv/bin/pip install -r requirements/dev.txt --no-deps \
    && /app/venv/bin/pip install -r requirements/mozautomation.txt --no-deps

WORKDIR /app

# This puts the egg-info dir in /app, which won't be overwritten
# when docker mounts the volume for our source code
RUN /app/venv/bin/python /app/wpt-sync/setup.py develop --no-deps

ENV PYTHONPATH=/app/wpt-sync
ENV WPTSYNC_ROOT=/app/workspace
ENV WPTSYNC_REPO_ROOT=/app/repos/
# Allow git-cinnabar to find latest hg
ENV PATH=/app/venv/bin:$PATH

# Mach requires that this is set
ENV SHELL=/bin/bash

WORKDIR /app/wpt-sync

# /app/wpt-sync: bind mount to src dir (only on dev) or dir with wheels?
# /app/workspace: bind mount to [empty] dir where service will write working data, logs
# config files, credentials, ssh config
# /app/repos: bind mount to ebs volume for gecko and wpt repos (or local dev repos)
VOLUME ["/app/wpt-sync", "/app/workspace", "/app/repos", "/app/config"]

ENTRYPOINT ["/tini", "-v", "-g", "--", "/app/start_wptsync.sh"]
CMD ["--worker", "--phab"]
