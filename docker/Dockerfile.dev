FROM ubuntu:18.04

ENV PATH=/app/third_party/git-cinnabar:/app/third_party/fzf/bin:/app/.local/bin:$PATH \
    RABBITMQ_CONFIG_FILE=/etc/rabbitmq/rabbitmq \
    # Mach requires that this is set
    SHELL=/bin/bash \
    WPTSYNC_ROOT=/app/workspace \
    WPTSYNC_REPO_ROOT=/app/repos/

RUN groupadd --gid 10001 app && \
    useradd --uid 10001 --gid 10001 --home /app --create-home app && \
    groupadd --gid 10002 rabbitmq && \
    useradd --uid 10002 --gid 10002 rabbitmq --home /home/rabbitmq --create-home && \
    # Disable ipv6 in gpg to avoid signing failures
    mkdir ~/.gnupg && echo "disable-ipv6" >> ~/.gnupg/dirmngr.conf

# install/update pip, git and erlang/rabbitmq dependencies
RUN set -eux; \
    apt-get update; \
    apt-get upgrade -y; \
    apt-get install -y \
        apt-transport-https \
        curl \
        emacs-nox \
        git \
        gnupg \
        less \
        locales \
        sudo \
        vim \
        wget \
        # Ensure /usr/bin/python exists
        python \
        # Required by cinnabar, mach, wpt, even for Py3
        python2.7 \
        python3.7 \
        python3-distutils \
        python3.7-distutils \
        python3.7-dev \
        python-pip \
        python3-pip; \
        # Set Python 3.7 as the default
        update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 1; \
        update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 2;


## Add apt repositories maintained by Team RabbitMQ
COPY ./docker/rabbitmq.list /etc/apt/sources.list.d/rabbitmq.list
COPY ./docker/rabbitmq-server.gpg /app/rabbitmq-server.gpg
RUN set -eux; \
    ## Team RabbitMQ's main signing key
    sudo apt-key adv --keyserver "hkps://keys.openpgp.org" --recv-keys "0x0A9AF2115F4687BD29803A206B73A36E6026DFCA"; \
    ## Launchpad PPA that provides modern Erlang releases
    sudo apt-key adv --keyserver "keyserver.ubuntu.com" --recv-keys "F77F1EDA57EBB1CC"; \
    ## PackageCloud RabbitMQ repository
    sudo apt-key add /app/rabbitmq-server.gpg; \
    rm /app/rabbitmq-server.gpg; \

    sudo cat /etc/apt/sources.list.d/rabbitmq.list; \

    ## Update package indices
    sudo apt-get update -y; \

    ## Install Erlang packages
    sudo apt-get install -y erlang-base \
       erlang-asn1 erlang-crypto erlang-eldap erlang-ftp erlang-inets \
       erlang-mnesia erlang-os-mon erlang-parsetools erlang-public-key \
       erlang-runtime-tools erlang-snmp erlang-ssl \
       erlang-syntax-tools erlang-tftp erlang-tools erlang-xmerl; \

    sudo apt-get install rabbitmq-server -y --fix-missing;

# install tini for process management so we can use its -g option
ENV TINI_VERSION v0.17.0
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini
RUN chmod +x /tini

RUN apt-get purge -y --auto-remove gnupg apt-transport-https

RUN locale-gen en_US.UTF-8
ENV LC_ALL=en_US.UTF-8 \
    LANG=en_US.UTF-8 \
    LANGUAGE=en_US.UTF-8

RUN adduser app sudo; \
    echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers;

COPY ./config/rabbitmq.conf /etc/rabbitmq/rabbitmq.conf
RUN echo LOG_BASE=/app/workspace/logs/rabbitmq >> /etc/rabbitmq/rabbitmq-env.conf

COPY ./docker/start_wptsync.sh /app/start_wptsync.sh
COPY ./docker/get_ini.py /app/get_ini.py
RUN chmod +x /app/get_ini.py /app/start_wptsync.sh

USER app

RUN python3 -m pip install --upgrade pip; \
    python3 -m pip install --user requests;

# Set up files and config
RUN mkdir -p /app/workspace \
    /app/workspace/logs \
    /app/workspace/logs/rabbitmq \
    /app/wpt-sync \
    /app/repos \
    /app/third_party/git-cinnabar \
    /app/third_party/fzf \
    /app/.ssh \
    /app/requirements \
    /app/.ipython/profile_default/startup/

RUN sudo chown -R rabbitmq:rabbitmq /app/workspace/logs/rabbitmq

COPY ./config/ssh/config ./config/ssh/known_hosts /app/.ssh/
RUN sudo chown -R app:app /app/.ssh/

# Install git-cinnabar
RUN cd /app/third_party/git-cinnabar \
    && git clone https://github.com/glandium/git-cinnabar.git . \
    && git checkout origin/master \
    && git cinnabar download

# Install fzf for mach try fuzzy
RUN cd /app/third_party/fzf \
    && git clone --depth 1 https://github.com/junegunn/fzf.git . \
    && ./install --bin

# Need the files required for setup in the image, but the actual
# code will be mounted from the host
COPY ./requirements /app/wpt-sync/requirements/
COPY ./00-startup.py /app/.ipython/profile_default/startup/
COPY ./setup.py ./setup.cfg /app/wpt-sync/

RUN set -eux; \
    git config --global user.name moz-wptsync-bot; \
    git config --global user.email wptsync@mozilla.com; \
    # Install the wptsync app in development
    pip3 install -r /app/wpt-sync/requirements/prod.txt --no-deps --require-hashes \
    && pip3 install -r /app/wpt-sync/requirements/dev.txt --no-deps \
    && pip3 install -r /app/wpt-sync/requirements/mozautomation.txt --no-deps \
    && pip2 install -r /app/wpt-sync/requirements/py2.txt

# /app/wpt-sync: bind mount to src dir (only on dev) or dir with wheels?
# /app/workspace: bind mount to [empty] dir where service will write working data, logs
# config files, credentials, ssh config
# /app/repos: bind mount to ebs volume for gecko and wpt repos (or local dev repos)
VOLUME ["/app/wpt-sync", "/app/workspace", "/app/repos", "/app/config"]

ENTRYPOINT ["/tini", "-v", "-g", "--", "/app/start_wptsync.sh"]
CMD ["--worker"]
